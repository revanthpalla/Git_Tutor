Download Git: https://git-scm.com/downloads/win

- git is a free and open source distributed version control system.
- git purpose is to keep track of projects and files as they change over time with manipulations happening from different users. 

Advantages:

commit of new changesets can be done locally without others seeing them and Once you have a group of changesets ready you can push all changes at once. 

everything except pulling and pushing can be done without an internet connection.

branching | merging can be done easily because all these are done in local machine. 

Initialise an empty Git repository
>> git init

configure your name and email for your history of commits
>> git config --global user.name "revanth palla"
>> git config --global user.email "<>@gmail.com"

to check what is configured user , email
>> git config --list

add change to staging area
>> git add . 
>> git add <specific_file_name>

check the status of change on what state it is present
>> git status

commit changes
>> git commit -m "first commit"

list of commits
>> git log --oneline --graph

to unstage a staged file
>> git restore --staged <files>

to rename a commit last commit message
>> git commit --amend -m "<message>"

to modify a specific commit message
>> git rebase -i HEAD~N

doing multiple commits keep the commit message same
>> git commit --amend --no-edit

Undoing of commits
    (head)
A-B-C

suppose you want to destroy commit C, throw away uncommited changes
>> git reset --hard HEAD~1
  (head)
A-B

suppose you want to undo commit and keep up the changes, because not all changes are wrong
>> git reset HEAD~1
    (head)
A-  B     -C

suppose you want to undo commit but leave your files and index at last commit 
>> git reset --soft HEAD~1

The difference between soft reset and commit --amend is is used to modify the most recent commit, 
it does so by creating a new commit that replaces the old one. This new commit will have a different commit ID (SHA1 checksum) than the original, 
even if only the commit message was changed.

to view current changes in working directory
>> git diff

to view changes between specific commits
>> git diff commit_id1 commit_id2

Non Linear development (branching)
to view list of branches
>> git branch --all

to create a new branch and move head to that branch
>> git branch <branch_name>
>> git checkout <branch_name>

to create and checkout sametime
>> git checkout -b <branch_name>

to rename a branch
>> git branch -M <new_name>

to delete a merged branch
>> git branch -d <branch_name>

to delete a non merged branch
>> git branch -D <branch_name> 

Merging Techiniques
above branching commands are present in develop br
in order to merge develop branch to main branch

checkout to main
>> git checkout main
>> git merge develop 
>> git pull main (optional update main to latest changes always recommended)
>> git merge develop

to view merge conflicts better
>> git config merge.conflictstyle diff3

difference validating
when same files | same line of code has been changes both branches
when you try to merge one branch to other we get merge conflicts
Rebasing
suppose 

                  - <-- c5 <-- c6  (develop)
                 |
c1 <-- c2 <-- c3 | <-- c4 (main)

>> git checkout develop (reverse way to merge)
>> git rebase main

c1 <-- c2 <-- c3 <-- c4 <-- c5 <-- c6
					 |              |
                    (main)         (develop)

>> git merge develop (performs fast farward merge)

to push changes to remote server
we need to add origin
>> git remote add origin https://github.com/revanthpalla/Git_Tutor.git

to push local to remote if same branch in remote deosnt exist it will create
>> git push -u origin main

next time onwards we can directly do git pull or git push

Fetch vs Pull

Fetch - command downloads commits, files, and refs from a remote repository into your local repository
It does not merge the changes into your current working branch.

>> git fetch origin main

inspect fetched changes
>> git log origin/main

Pull - command is used in Git to fetch and download content from a remote repository and 
immediately update the local repository to match that content.

>> git pull origin main (pulling from remote repo origin and main br)

>> git pull (if remote br and local branch are in sync directly do this)

working_dir         staging          local_repo              remote_repo

                                       <----- git fetch --------|

   <--------- git merge ---------------|

   <---------------------- git pull ----------------------------|

>> git pull = git fetch + git merge

>> git fetch

--o--o--o--O--O (origin/master updated)
         \
          x--x (master)

>> git rebase origin/master  | git pull

--o--o--o--O--O (origin/master updated)
               \
                x'--x' (master rebased)

>> git push

--o--o--o--O--O--x'--x' (origin/master, master)
